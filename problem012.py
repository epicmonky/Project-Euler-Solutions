# The sequence of triangle numbers is generated by adding the natural numbers. So the 7th triangle number would be
# 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be: 1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...
# What is the value of the first triangle number to have over five hundred divisors?

import euler_lib
import math


# Returns the number of divisors of n, including 1 and n
def num_divisors(n):
    primes = euler_lib.primes_below(n)
    if len(primes) == 1:
        return 2
    exponents = []
    for p in primes:
        exponent = 0
        while n % p == 0:
            exponent += 1
            n = n / p
        if exponent != 0:
            exponents.append(exponent)
    num = 1
    for e in exponents:
        num = num * (e + 1)
    return num


# Generates the triangle numbers
def triangle_generator():
    n = 1
    while True:
        t = n * (n + 1) / 2
        yield n, t
        n += 1


if __name__ == '__main__':
    triangles = triangle_generator()
    for i in triangles:
        print(i)
        n = i[0]
        if n % 2 == 0:  # Note that t = n * (n + 1) / 2, and n, (n + 1) are coprime
            d = num_divisors(n / 2) * num_divisors(n + 1)
        else:
            d = num_divisors(n) * num_divisors((n + 1) / 2)
        if d > 500:
            print(i[1])
            triangles.close()
